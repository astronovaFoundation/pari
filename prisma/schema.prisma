// Prisma Schema for Pari App
// Provider: PostgreSQL

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Status {
  SCHEDULED
  COMPLETED
  CANCELLED
}

enum Role {
  USER
  ADMIN
}

// User model with Better Auth support (email + phone login)
model User {
  id                  String   @id @default(cuid())

  // User profile fields
  name                String?
  email               String?  @unique
  emailVerified       Boolean  @default(false)

  // Phone authentication fields
  phoneNumber         String?  @unique
  phoneNumberVerified Boolean  @default(false)

  // App-specific fields
  role                Role     @default(USER)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  appointments        Appointment[]
  sessions            Session[]
  accounts            Account[]

  @@map("user")
}

// Better Auth Account model
model Account {
  id           String   @id @default(cuid())
  userId       String
  accountId    String
  providerId   String
  accessToken  String?
  refreshToken String?
  expiresAt    DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@map("account")
}

// Better Auth Session model
model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

// Better Auth Verification model
model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("verification")
}

// Appointment model (using Square Bookings)
model Appointment {
  id                String   @id @default(cuid())
  userId            String
  squareBookingId   String?  @unique // Square Booking ID
  squarePaymentId   String?  // Square Payment ID for refunds
  date              String   // ISO date string (YYYY-MM-DD)
  time              String   // Time string (HH:MM)
  totalPeople       Int      @default(1)
  totalAmount       Float    @default(0)
  serviceIds        String[] // Array of Sanity service IDs
  packageId         String?  // Sanity package ID if applicable
  status            Status
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("appointment")
}

// Newsletter subscribers
model Newsletter {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())

  @@map("newsletter")
}

// Calendar availability - default slots
model DefaultSlot {
  id        String  @id @default(cuid())
  dayOfWeek Int     // 0-6 (Sunday-Saturday)
  time      String  // Time string (HH:MM)
  available Boolean @default(true)

  @@unique([dayOfWeek, time])
  @@map("default_slot")
}

// Calendar availability - date overrides
model DateOverride {
  id        String   @id @default(cuid())
  date      DateTime // Specific date
  time      String   // Time string (HH:MM)
  available Boolean  @default(true)
  deleted   Boolean  @default(false)

  @@unique([date, time])
  @@map("date_override")
}

